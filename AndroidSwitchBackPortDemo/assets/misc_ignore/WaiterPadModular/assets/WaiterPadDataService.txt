package com.azilen.waiterpad;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.azilen.waiterpad.R;
import com.azilen.waiterpad.asynctask.GetOrderedItemStatusAsyncTask;
import com.azilen.waiterpad.data.LanguageXml;
import com.azilen.waiterpad.data.Order;
import com.azilen.waiterpad.data.OrderList;
import com.azilen.waiterpad.data.StringOrderIds;
import com.azilen.waiterpad.utils.SearchForOrder;
import com.azilen.waiterpad.utils.Utils;
import com.google.common.collect.Iterables;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Binder;
import android.os.IBinder;
import android.preference.PreferenceManager;
import android.support.v4.app.NotificationCompat;
import android.support.v4.util.LruCache;
import android.util.Log;

/**
 * Runs every five minutes and receives a list of orders per waiter 
 * with the updated statuses of the orders, also fetches in the current order list
 * so as to update the table related orders
 * @author dhara.shah
 *
 */
public class WaiterPadDataService extends Service{
	private SharedPreferences mSp;
	private LruCache<String, Object> mMemcache;
	private List<String> mOrderIdList;
	private String mWaiterId;
	private HashMap<String, List<Order>> mOrdersPerWaiterMap;
	private List<Order> mListOfOrders;
	private static List<Order> mNotificationOrderList;
	private NotificationManager mNotificationManager;
	private LanguageXml mLanguageXml;
	private String TAG = this.getClass().getSimpleName();
	private GetOrderedItemStatusAsyncTask mGetOrderedItemStatusAsyncTask;
	private String mPortAddress;
	private String mIPAddress; 
	private String mMessage;
	private String mSectionId;
	
	private static int mCounter;
	
	private IBinder iBinder = new LocalBinder();

	public class LocalBinder extends Binder {
		WaiterPadDataService getBinder() {
			return WaiterPadDataService.this;
		}
	}
	
	@Override
	public IBinder onBind(Intent intent) {
		return iBinder;
	}

	/* (non-Javadoc)
	 * @see android.app.Service#onStartCommand(android.content.Intent, int, int)
	 */
	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		mSp = PreferenceManager.getDefaultSharedPreferences(WaiterPadDataService.this);
		mPortAddress = mSp.getString("portAddress", "");
		mIPAddress = mSp.getString("ipAddress", "");
		mSectionId = mSp.getString("sectionId","");
		mMemcache = Utils.getInstance();
		removeNotificationOrders();
		callAsyncMethod();
		return super.onStartCommand(intent, flags, startId);
	}
	
	public int getCount() {
		return mCounter;
	}
	
	public void setCount(int counter) {
		mCounter = counter;
	}
	
	@SuppressWarnings({ "unchecked" })
	private void callAsyncMethod() {
		
		Log.i(TAG, TAG + " called ");
		
		// Get all the orderedItems of the waiter
		// initializing memCache
		if(mSp.contains("waiterId")) {
			mWaiterId = mSp.getString("waiterId", "");
		}
		
		mMemcache = Utils.getInstance();
		
		mOrdersPerWaiterMap = (HashMap<String, List<Order>>)mMemcache.get("orderPerWaiter");
		mOrderIdList = new ArrayList<String>();
		
		if(mWaiterId != null) {
			if(mOrdersPerWaiterMap != null && mWaiterId.trim().length() > 0) {
				if(mOrdersPerWaiterMap.containsKey(mWaiterId)) {
					mListOfOrders = mOrdersPerWaiterMap.get(mWaiterId);
					
					if(mListOfOrders != null) {
						for (Order order : mListOfOrders) {
							if(order.getOrderId() != null && 
									order.getOrderStatus() != null && 
									order.getOrderStatus().ordinal() != 2 && 
									order.getTable().getSectionId().equals(mSectionId)) {
								Log.i(TAG, "value of order id: " + order.getOrderId());
								mOrderIdList.add(order.getOrderId());
							}
						}
					}
				}
				
				if(mPortAddress != null && 
						mPortAddress.trim().length() > 0 && 
						mIPAddress != null && 
						mIPAddress.trim().length() >0) {
					if(mOrderIdList != null && 
							mOrderIdList.size() > 0) {
						
						StringOrderIds orderIds = new StringOrderIds();
						orderIds.setOrderIds(mOrderIdList);
						
						mGetOrderedItemStatusAsyncTask = new GetOrderedItemStatusAsyncTask(WaiterPadDataService.this,
								orderIds,
								WaiterPadDataService.this.getString(R.string.SYNC_STATUS),
								"waiterpaddataservice",
								null);
						mGetOrderedItemStatusAsyncTask.execute();
					}
				}
			}
		}
			
	}
	
	/**
	 * Generates a notification for all the orders whose status may have been updated
	 * Changes as on 6th June 2013
	 * @param ordersForNotification
	 */
	private void generateNotification(List<Order> ordersForNotification) {
		Log.i(TAG, " ---- GENERATE NOTIFICATION CALLED ---- ");
		// create a notification message here
		mNotificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

		long[] vibration = {100,200,100,200};

		NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(WaiterPadDataService.this);
		
		//Intent resultNotificationIntent = new Intent(WaiterPadDataService.this, OrderRelatedFragment.class);
		
		Intent resultNotificationIntent = new Intent(WaiterPadDataService.this, NotificationActivity.class);
		
		if(ordersForNotification != null) {
			for (Order order : ordersForNotification) {
				//resultNotificationIntent.putExtra("orderId", order.getOrderId());
				//resultNotificationIntent.putExtra("tableId", order.getTable().getTableId());
				//resultNotificationIntent.putExtra("tableNumber", String.valueOf(order.getTable().getTableNumber()));
				//resultNotificationIntent.putExtra("orderNumber", String.valueOf(order.getOrderNumber()));
				
				String langSelection = mSp.getString("languageSelected", "");
				
				if(langSelection.trim().length() > 0 ){
					mLanguageXml = (LanguageXml)mMemcache.get(langSelection);
				}
				
				if(mLanguageXml != null) {
					mMessage = mLanguageXml.getOrderNumberLabel() + 
							" " +
							order.getOrderNumber() + 
							" " + 
							mLanguageXml.getHasBeenUpdated();
				}else {
					mMessage = WaiterPadDataService.this.getString(R.string.order_number) + 
							" " +
							order.getOrderNumber() + 
							" " + 
							WaiterPadDataService.this.getString(R.string.order_status_message);
				}
				
				notificationBuilder.setAutoCancel(true)
					.setContentText(mMessage)
					.setContentTitle(mMessage)
					.setSmallIcon(R.drawable.app_icon)
					.setOngoing(true)
					.setTicker(mMessage)
					.setVibrate(vibration)
					.setStyle(new NotificationCompat.BigTextStyle(notificationBuilder).bigText(mMessage))
					.setWhen(System.currentTimeMillis())
					.setLights(android.R.color.white, 5000, 0);
				
				Notification notification = notificationBuilder.build();
				
				PendingIntent pendingIntent = PendingIntent.getActivity(WaiterPadDataService.this, 
						2,resultNotificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
				notification.contentIntent = pendingIntent;
				notificationBuilder.setContentIntent(pendingIntent);
				mNotificationManager.notify(order.getOrderNumber(), notification);
				
				storeNotificationOrders(order);
			}
		}
	}
	
	/**
	 * The order list received for the orderids sent
	 * would be used to generate a notification for the user
	 * @param orderList
	 */
	@SuppressWarnings("unchecked")
	public void responseReceived(OrderList orderList) {
		Log.i(TAG, " called by async task");
		List<Order> orderListForNotification = null;
		if(orderList != null) {
			
			mOrdersPerWaiterMap = (HashMap<String, List<Order>>)mMemcache.get("orderPerWaiter");
			mOrderIdList = new ArrayList<String>();
			
			if(mOrdersPerWaiterMap != null) {
				if(mOrdersPerWaiterMap.containsKey(mWaiterId)) {
					// list of orders of the waiter
					mListOfOrders = mOrdersPerWaiterMap.get(mWaiterId);
				}
			}
			
			List<Order> orders = orderList.getOrders();
			
			if(orders != null) {
				orderListForNotification = orders;
				int index = 0;
				for (Order order : orders) {
					Order orderPresent = 
							Iterables.find(mListOfOrders, new SearchForOrder(order.getOrderId()),null);
				
					// its a new order not in the waiter list
					if(orderPresent == null) {
						mListOfOrders.add(order);
					}else if (orderPresent != null) {
						// the order is not new
						// hence change the values of the order
						index = getPositionFromList(order,mListOfOrders);
						if(index == -1) {
							// the order does not exist
						}else {
							// remove from the list
							mListOfOrders.remove(index);
							
							// add to the list again
							mListOfOrders.add(index,order);
						}
					}
				}
				
				// update the cache with the new records
				mOrdersPerWaiterMap.remove(mWaiterId);
				mOrdersPerWaiterMap.put(mWaiterId, mListOfOrders);
				mMemcache.put("ordersPerWaiter", mOrdersPerWaiterMap);
			}
		}		
		generateNotification(orderListForNotification);
		if(orderListForNotification != null) {
			setCount(orderListForNotification.size());
		}
	}
	
	private int getPositionFromList(Order order, List<Order> orderList) {
		for(int i=0;i<orderList.size();i++) {
			Order orderObj = orderList.get(i);
			if(orderObj != null) {
				if(orderObj.getOrderId().equalsIgnoreCase(order.getOrderId())) {
					return i;
				}
			}
		}
		
		return -1;
	}
	
	@Override
	public void onDestroy() {
		super.onDestroy();
	}
	
	@SuppressWarnings("unchecked")
	private void storeNotificationOrders(Order order) {
		mNotificationOrderList = (List<Order>)mMemcache.get("notificationOrders");
		if(mNotificationOrderList != null && mNotificationOrderList.size() > 0) {
			// check if order is present

			Order orderPresent = Iterables.find(mNotificationOrderList, 
					new SearchForOrder(order.getOrderId()),null);
			if(orderPresent != null) {
				mNotificationOrderList.remove(orderPresent);				
				mNotificationOrderList.add(orderPresent);
			}else {
				mNotificationOrderList.add(order);
			}
		}else {
			mNotificationOrderList = new ArrayList<Order>();
			mNotificationOrderList.add(order);
		}
		mMemcache.put("notificationOrders", mNotificationOrderList);
	}
	
	private void removeNotificationOrders() {
		@SuppressWarnings("unchecked")
		List<Order> orders = (List<Order>)mMemcache.get("notificationOrders");
		
		if(orders != null) {
			mMemcache.remove("notificationOrders");
			mNotificationOrderList = new ArrayList<Order>();
		}
	}
 }
